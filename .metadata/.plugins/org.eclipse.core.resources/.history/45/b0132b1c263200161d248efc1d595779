package digit.parser;

import java.io.*;

public class TransformNumberRu extends AbstractTransformNumber{
	
	private String[][] forms;
	private File file;
	
	final String[][] units = {
			{"ноль","один","два","три","четыре","пять","шесть","семь","восемь","девять"},
			{"ноль","одна","две","три","четыре","пять","шесть","семь","восемь","девять"}
	};
	
	final String[] hundreds = {"", "сто","двести","триста","четыреста","пятьсот",
								"шестьсот","семьсот","восемьсот","девятьсот"};
	
	final String[] decades_11_19 = {"","одиннадцать","двенадцать","тринадцать",
									"четырнадцать","пятнадцать","шестнадцать",
									"семнадцать","восемнадцать","девятнадцать"};
	
	final String[] decades = {"","десять","двадцать","тридцать","сорок","пятьдесят",
								"шестьдесят","семьдесят","восемьдесят","девяносто"};
	
	private void fileExists(String fileName) throws FileNotFoundException{
		file = new File(fileName);
		if(!file.exists()){
			throw new FileNotFoundException(file.getName());
		}
	}

	public void readFile(String fileName) throws FileNotFoundException{
		StringBuilder builder = new StringBuilder();
		int str_i = 0, str_j = 0;
		fileExists(fileName);
		try{
			BufferedReader in = new BufferedReader(new FileReader(file.getAbsoluteFile()));
			try{
				String str;
				while((str = in.readLine()) != null){		
					if(str_j == 0){
						for(int i = 0; i<str.length(); i++){	
							if(str.charAt(i) == ',')
								str_j++;
						}
					} 
					for(int i =0; i< str.length(); i++){
						if(str.charAt(i) == ';')
							str_i++;
					}
					builder.append(str);
				}
			} finally{
				in.close();
			}
		} catch(IOException e){
			throw new RuntimeException(e);
		}
		
		String str = builder.toString();
		forms = new String[str_i][str_j];
		for(int i = 0; i < str_i; i++){
			forms[i] = str.split(";");
			for(int j = 0; j <= str_j; j++){
				//forms[i][j] = forms[i].
				//System.out.println(forms[i].toString());
			}
		}
	}
	
	protected String getUnits(int n, int gender) {
		return units[gender][n];
	}

	protected String getDecades(int n) {
		return decades[n];
	}

	protected String get11_19(int n) {
		return decades_11_19[n];
	}

	protected String getHundreds(int n) {
		return hundreds[n];
	}

	protected String getUnitTitle(int index, float count) {
		if(count%100 > 4 && count%100<21){
			return forms[index][2];
		}
		switch((int)(count%10)){
		case 1: return forms[index][0];
		case 2: case 3: case 4: return forms[index][1];
		default: return forms[index][2];
		}
	}

	protected int getGender(int index) {
		return Integer.parseInt(forms[index][3]);
	}
	

}